// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 21.1.1 Build 850 06/23/2022 SJ Lite Edition"

// DATE "12/16/2022 02:28:17"

// 
// Device: Altera EP4CGX150DF31C7 Package FBGA896
// 

// 
// This Verilog file should be used for Questa Intel FPGA (Verilog) only
// 

`timescale 1 ps/ 1 ps

module roll_over_test (
	roll_over,
	clock,
	rst_neg,
	Q);
output 	roll_over;
input 	clock;
input 	rst_neg;
output 	[3:0] Q;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \roll_over~output_o ;
wire \Q[3]~output_o ;
wire \Q[2]~output_o ;
wire \Q[1]~output_o ;
wire \Q[0]~output_o ;
wire \clock~input_o ;
wire \inst|Q~3_combout ;
wire \rst_neg~input_o ;
wire \inst|Q~0_combout ;
wire \inst|Q~2_combout ;
wire \inst|Q~1_combout ;
wire \inst|roll_over~0_combout ;
wire \inst|roll_over~1_combout ;
wire \inst|roll_over~q ;
wire [3:0] \inst|Q ;


cycloneiv_io_obuf \roll_over~output (
	.i(\inst|roll_over~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\roll_over~output_o ),
	.obar());
// synopsys translate_off
defparam \roll_over~output .bus_hold = "false";
defparam \roll_over~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \Q[3]~output (
	.i(\inst|Q [3]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[3]~output .bus_hold = "false";
defparam \Q[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \Q[2]~output (
	.i(\inst|Q [2]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[2]~output .bus_hold = "false";
defparam \Q[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \Q[1]~output (
	.i(\inst|Q [1]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[1]~output .bus_hold = "false";
defparam \Q[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \Q[0]~output (
	.i(\inst|Q [0]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[0]~output .bus_hold = "false";
defparam \Q[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_ibuf \clock~input (
	.i(clock),
	.ibar(gnd),
	.o(\clock~input_o ));
// synopsys translate_off
defparam \clock~input .bus_hold = "false";
defparam \clock~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \inst|Q~3 (
// Equation(s):
// \inst|Q~3_combout  = (!\inst|Q [0] & (((\inst|Q [2]) # (!\inst|Q [1])) # (!\inst|Q [3])))

	.dataa(\inst|Q [0]),
	.datab(\inst|Q [3]),
	.datac(\inst|Q [1]),
	.datad(\inst|Q [2]),
	.cin(gnd),
	.combout(\inst|Q~3_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Q~3 .lut_mask = 16'h5515;
defparam \inst|Q~3 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \rst_neg~input (
	.i(rst_neg),
	.ibar(gnd),
	.o(\rst_neg~input_o ));
// synopsys translate_off
defparam \rst_neg~input .bus_hold = "false";
defparam \rst_neg~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \inst|Q[0] (
	.clk(\clock~input_o ),
	.d(\inst|Q~3_combout ),
	.asdata(vcc),
	.clrn(\rst_neg~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst|Q [0]),
	.prn(vcc));
// synopsys translate_off
defparam \inst|Q[0] .is_wysiwyg = "true";
defparam \inst|Q[0] .power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb \inst|Q~0 (
// Equation(s):
// \inst|Q~0_combout  = (\inst|Q [1] & ((\inst|Q [2] & (\inst|Q [0] $ (\inst|Q [3]))) # (!\inst|Q [2] & (\inst|Q [0] & \inst|Q [3])))) # (!\inst|Q [1] & (((\inst|Q [3]))))

	.dataa(\inst|Q [1]),
	.datab(\inst|Q [2]),
	.datac(\inst|Q [0]),
	.datad(\inst|Q [3]),
	.cin(gnd),
	.combout(\inst|Q~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Q~0 .lut_mask = 16'h7D80;
defparam \inst|Q~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \inst|Q[3] (
	.clk(\clock~input_o ),
	.d(\inst|Q~0_combout ),
	.asdata(vcc),
	.clrn(\rst_neg~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst|Q [3]),
	.prn(vcc));
// synopsys translate_off
defparam \inst|Q[3] .is_wysiwyg = "true";
defparam \inst|Q[3] .power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb \inst|Q~2 (
// Equation(s):
// \inst|Q~2_combout  = (\inst|Q [0] & (((!\inst|Q [1])))) # (!\inst|Q [0] & (\inst|Q [1] & ((\inst|Q [2]) # (!\inst|Q [3]))))

	.dataa(\inst|Q [2]),
	.datab(\inst|Q [3]),
	.datac(\inst|Q [0]),
	.datad(\inst|Q [1]),
	.cin(gnd),
	.combout(\inst|Q~2_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Q~2 .lut_mask = 16'h0BF0;
defparam \inst|Q~2 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \inst|Q[1] (
	.clk(\clock~input_o ),
	.d(\inst|Q~2_combout ),
	.asdata(vcc),
	.clrn(\rst_neg~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst|Q [1]),
	.prn(vcc));
// synopsys translate_off
defparam \inst|Q[1] .is_wysiwyg = "true";
defparam \inst|Q[1] .power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb \inst|Q~1 (
// Equation(s):
// \inst|Q~1_combout  = \inst|Q [2] $ (((\inst|Q [1] & \inst|Q [0])))

	.dataa(gnd),
	.datab(\inst|Q [2]),
	.datac(\inst|Q [1]),
	.datad(\inst|Q [0]),
	.cin(gnd),
	.combout(\inst|Q~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Q~1 .lut_mask = 16'h3CCC;
defparam \inst|Q~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \inst|Q[2] (
	.clk(\clock~input_o ),
	.d(\inst|Q~1_combout ),
	.asdata(vcc),
	.clrn(\rst_neg~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst|Q [2]),
	.prn(vcc));
// synopsys translate_off
defparam \inst|Q[2] .is_wysiwyg = "true";
defparam \inst|Q[2] .power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb \inst|roll_over~0 (
// Equation(s):
// \inst|roll_over~0_combout  = (\inst|roll_over~q  & ((\inst|Q [0]) # (\inst|Q [3] $ (\inst|Q [1])))) # (!\inst|roll_over~q  & (\inst|Q [3] & (!\inst|Q [1] & \inst|Q [0])))

	.dataa(\inst|roll_over~q ),
	.datab(\inst|Q [3]),
	.datac(\inst|Q [1]),
	.datad(\inst|Q [0]),
	.cin(gnd),
	.combout(\inst|roll_over~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|roll_over~0 .lut_mask = 16'hAE28;
defparam \inst|roll_over~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \inst|roll_over~1 (
// Equation(s):
// \inst|roll_over~1_combout  = (\inst|Q [2] & (\inst|roll_over~q )) # (!\inst|Q [2] & ((\inst|roll_over~0_combout )))

	.dataa(\inst|roll_over~q ),
	.datab(\inst|Q [2]),
	.datac(\inst|roll_over~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|roll_over~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst|roll_over~1 .lut_mask = 16'hB8B8;
defparam \inst|roll_over~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \inst|roll_over (
	.clk(\clock~input_o ),
	.d(\inst|roll_over~1_combout ),
	.asdata(vcc),
	.clrn(\rst_neg~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst|roll_over~q ),
	.prn(vcc));
// synopsys translate_off
defparam \inst|roll_over .is_wysiwyg = "true";
defparam \inst|roll_over .power_up = "low";
// synopsys translate_on

assign roll_over = \roll_over~output_o ;

assign Q[3] = \Q[3]~output_o ;

assign Q[2] = \Q[2]~output_o ;

assign Q[1] = \Q[1]~output_o ;

assign Q[0] = \Q[0]~output_o ;

endmodule
