// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/16/2022 18:27:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab11Part1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab11Part1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] din;
reg reset;
reg s;
// wires                                               
wire done;
wire [3:0] result;

// assign statements (if any)                          
Lab11Part1 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.din(din),
	.done(done),
	.reset(reset),
	.result(result),
	.s(s)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #50000 1'b0;
	reset = #260000 1'b1;
	reset = #20000 1'b0;
	reset = #220000 1'b1;
	reset = #40000 1'b0;
	reset = #50000 1'b1;
	reset = #40000 1'b0;
end 

// s
initial
begin
	s = 1'b0;
	s = #70000 1'b1;
	s = #30000 1'b0;
	s = #30000 1'b1;
	s = #220000 1'b0;
	s = #30000 1'b1;
	s = #120000 1'b0;
	s = #60000 1'b1;
	s = #20000 1'b0;
	s = #40000 1'b1;
	s = #40000 1'b0;
	s = #40000 1'b1;
end 
// din[ 7 ]
initial
begin
	din[7] = 1'b0;
end 
// din[ 6 ]
initial
begin
	din[6] = 1'b0;
	din[6] = #10000 1'b1;
	din[6] = #490000 1'b0;
end 
// din[ 5 ]
initial
begin
	din[5] = 1'b0;
end 
// din[ 4 ]
initial
begin
	din[4] = 1'b0;
	din[4] = #10000 1'b1;
	din[4] = #490000 1'b0;
end 
// din[ 3 ]
initial
begin
	din[3] = 1'b0;
	din[3] = #10000 1'b1;
	din[3] = #490000 1'b0;
	din[3] = #10000 1'b1;
end 
// din[ 2 ]
initial
begin
	din[2] = 1'b0;
end 
// din[ 1 ]
initial
begin
	din[1] = 1'b0;
end 
// din[ 0 ]
initial
begin
	din[0] = 1'b0;
end 
endmodule

