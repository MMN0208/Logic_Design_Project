// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2022 01:26:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab9Part2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab9Part2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Mem_Clock;
reg Pro_Clock;
reg Resetn;
reg rst_neg;
reg Run;
// wires                                               
wire [4:0] Address;
wire [8:0] BusWires;
wire [8:0] DIN;
wire Done;

// assign statements (if any)                          
Lab9Part2 i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.BusWires(BusWires),
	.DIN(DIN),
	.Done(Done),
	.Mem_Clock(Mem_Clock),
	.Pro_Clock(Pro_Clock),
	.Resetn(Resetn),
	.rst_neg(rst_neg),
	.Run(Run)
);
initial 
begin 
#1000000 $finish;
end 

// Mem_Clock
initial
begin
	Mem_Clock = 1'b0;
	Mem_Clock = #40000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #10000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #70000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #170000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #250000 1'b1;
	Mem_Clock = #10000 1'b0;
	Mem_Clock = #320000 1'b1;
	Mem_Clock = #10000 1'b0;
end 

// Pro_Clock
always
begin
	Pro_Clock = 1'b0;
	Pro_Clock = #10000 1'b1;
	#10000;
end 

// Run
initial
begin
	Run = 1'b0;
	Run = #40000 1'b1;
	Run = #20000 1'b0;
	Run = #100000 1'b1;
	Run = #20000 1'b0;
	Run = #160000 1'b1;
	Run = #20000 1'b0;
	Run = #240000 1'b1;
	Run = #20000 1'b0;
	Run = #310000 1'b1;
	Run = #20000 1'b0;
end 

// Resetn
initial
begin
	Resetn = 1'b1;
end 

// rst_neg
initial
begin
	rst_neg = 1'b1;
end 
endmodule

